import { google } from "googleapis";
import credentials from "@/lib/credentials.json";

export default async function handler(req, res) {
  const { day, exercise } = req.query;
  if (!day || !exercise) {
    return res.status(400).json({ error: "Missing day or exercise" });
  }

  try {
    const auth = new google.auth.GoogleAuth({
      credentials,
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });

    const sheets = google.sheets({ version: "v4", auth });
    const spreadsheetId = "1kge0xQANIYQyy61Qeh2zsuETfnb0WjIUt3h33byskjA";
    const sheetName = day === "Abs" ? "Abs Log" : "March/april 2025";
    const range = `${sheetName}!A:Z`;

    const result = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const rows = result.data.values || [];
    const normalize = (str) => str?.toLowerCase().replace(/\s+/g, "");
    const normalizedDay = normalize(day);
    const normalizedExercise = normalize(exercise);

    // Declare it FIRST
    let dayStart = -1;
    
    console.log("üîç Looking for day block:", normalizedDay);
    
    for (let i = 0; i < rows.length; i++) {
      const raw = rows[i][1];
      const val = normalize(raw);
      console.log(`Row ${i}: A="${rows[i][0]}", B="${raw}", normalized="${val}"`);
    
      // Now match against normalized string in col B
      if (val?.startsWith("day") && val.includes(normalizedDay)) {
        console.log(`‚úÖ Found start of block for day: "${raw}" at row ${i}`);
        dayStart = i;
        break;
      }
    }
    
    // Then proceed with the check
    if (dayStart === -1) {
      return res.status(404).json({ error: "Day block not found" });
    }
    

          let exerciseRow = -1;
          for (let i = dayStart + 1; i < rows.length; i++) {
            const row = rows[i];
            const a = normalize(row[0]); // e.g. "Warm Up"
            const b = normalize(row[1]); // e.g. "Incline Dumbbell Bench Press"
            const c = normalize(row[2]); // alternate column
            // If we hit the next "Day X" block, stop scanning
            if (a?.startsWith("day") || b?.startsWith("day")) {
              console.log(`‚õî Reached next day block at row ${i}, stopping search`);
              break;
            }
            // Skip known non-exercise rows
            const skip = ["chest", "legs", "delts+arms", "back", "warmup", "warm-up", "abs", ""];
            if (skip.includes(a) || skip.includes(b)) continue;
            // Compare against both columns B and C
            if (b === normalizedExercise || c === normalizedExercise) {
              console.log(`‚úÖ Matched exercise "${exercise}" at row ${i}`);
              exerciseRow = i;
              break;
            }
          }
          if (exerciseRow === -1) {
            return res.status(404).json({ error: "Exercise not found in this day block" });
          }
          
          // Now fetch the actual columns (lowercased)
          const actualCols = headerRow
            .map((val, idx) => ({ val: val?.toLowerCase(), idx }))
            .filter((col) => col.val?.includes("actual"))
            .map((col) => col.idx);
          

    let setCount = 0;
    let lastActual = "";
    let lastWeight = null;

    for (const col of actualCols.reverse()) {
      for (let i = exerciseRow + 2; i >= exerciseRow; i--) {
        const cell = rows[i]?.[col];
        if (cell && !cell.toLowerCase().includes("warm")) {
          setCount++;
          if (!lastActual) {
            lastActual = cell;
            const match = cell.match(/^(\d+(?:\.\d+)?)\s*x\s*\d+/);
            if (match) lastWeight = parseFloat(match[1]);
          }
        }
      }
      if (setCount >= 3) break;
    }

    const prescribedSet = rows[exerciseRow]?.[actualCols[0] - 1] || "";
    const suggestedWeight = lastWeight ? Math.round(lastWeight * 1.025) : null;

    // üß† Warm-up logic: 40%, 60%, 80% of suggested
    let warmupSets = [];
    if (suggestedWeight) {
      const round5 = (x) => Math.round(x / 5) * 5;
      warmupSets = [
        `${round5(suggestedWeight * 0.4)} x 10`,
        `${round5(suggestedWeight * 0.6)} x 5`,
        `${round5(suggestedWeight * 0.8)} x 3`,
      ];
    }

    return res.status(200).json({
      setCount,
      lastActual: lastActual || null,
      prescribedSet,
      suggestedWeight,
      warmupSets,
    });
  } catch (err) {
    console.error("getsetcount error", err);
    return res.status(500).json({ error: "Internal server error" });
  }
}
